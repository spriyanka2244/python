Instance method
class methhod
static method

Instance method
Instance method by calling self because the value of self.name changes according to passing value of name
                                                            
class student:
    school="Teluko" 
    
    def __init__(self,m1,m2,m3): #to pass the value you use variable m1,m2,m3
        self.m1=m1 #m1 value assigned by self.m1 which with with object
        self.m2=m2  #instance variable
        self.m3=m3
        
    def avg(self): #its a instance method because you pointing out to self
        return (self.m1 + self.m2 + self.m3)/3
  
        
s1=student(23,45,6) #creat a object 1
s2=student(2,5,6)  #create a object 2

print(s1.avg())
print(s2.avg())

>>> %Run 1.py
24.666666666666668
4.333333333333333
>>> 
//////////////////////////////////////////////////////////////////////////////////////////////////
Instance method as two types
Accessor Methods {{{data hidden in the object can be accessed from these method}}}}
Mutator Methods {{{ It modify the data hidden in the object to new data value update data}}}}

class student:
    school="Teluko" 
    
    def __init__(self,m1,m2,m3): #to pass the value you use variable m1,m2,m3
        self.m1=m1 #m1 value assigned by self.m1 which with with object
        self.m2=m2  #instance variable
        self.m3=m3
        
    def avg(self): #its a instance method because you pointing out to self
        return (self.m1 + self.m2 + self.m3)/3
    
    def get_m1(self):
        return self.m1
    
    def set_m1(self,value):
        self.m1=value
                
        
s1=student(23,45,6) #creat a object 1
s2=student(2,5,6)  #create a object 2

print("Accessor")
print(s1.get_m1())


print("mutator")
print(s1.set_m1(23))

>>> %Run 1.py
Accessor
23
mutator
None
>>> 

2 METHODS
class method
If your working with class variable you should cls not self

class student:
    school="Teluko" 
    
    def __init__(self,m1,m2,m3): #to pass the value you use variable m1,m2,m3
        self.m1=m1 #m1 value assigned by self.m1 which with with object
        self.m2=m2  #instance variable
        self.m3=m3
        
    def avg(self): #its a instance method because you pointing out to self
        return (self.m1 + self.m2 + self.m3)/3
    
    def info(cls):
        return cls.school
         
        
s1=student(23,45,6) #creat a object 1
s2=student(2,5,6)  #create a object 2

print(s1.avg())

print(s1.info())
print(student.info())

>>> %Run 1.py
24.666666666666668
Teluko
Traceback (most recent call last):
  File "D:\Users\DELL\Downloads\1.py", line 22, in <module>
    print(student.info())
TypeError: student.info() missing 1 required positional argument: 'cls'
>>> 
 the error is to pass value of class but in working with class and static we should
 use 
 ///////////////////////////////////////////////   
  @classmethod as decorator
  class student:
    school="Teluko" 
    
    def __init__(self,m1,m2,m3): #to pass the value you use variable m1,m2,m3
        self.m1=m1 #m1 value assigned by self.m1 which with with object
        self.m2=m2  #instance variable
        self.m3=m3
        
    def avg(self): #its a instance method because you pointing out to self
        return (self.m1 + self.m2 + self.m3)/3
    
    @classmethod
    def info(cls):
        return cls.school
         
        
s1=student(23,45,6) #creat a object 1
s2=student(2,5,6)  #create a object 2

print(s1.avg())

print(s1.info())
print(student.info())

>>> %Run 1.py
24.666666666666668
Teluko
Teluko
>>> 
//////////////////////////////////////////
static variavle not belong to class variable and static variable 

class student:
    school="Teluko" 
    
    def __init__(self,m1,m2,m3): #to pass the value you use variable m1,m2,m3
        self.m1=m1 #m1 value assigned by self.m1 which with with object
        self.m2=m2  #instance variable
        self.m3=m3
        
    def avg(self): #its a instance method because you pointing out to self
        return (self.m1 + self.m2 + self.m3)/3
    
    @classmethod
    def getSchool(cls):
        return cls.school
    
    @staticmethod
    def info(): # inside in info no self and cls for static
        print("this is static")
         
        
s1=student(23,45,6) #creat a object 1
s2=student(2,5,6)  #create a object 2


student.info()
    
>>> %Run 1.py
this is static
>>> 

                              
  
  

    
        



